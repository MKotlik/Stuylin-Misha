- transition: background-color 0.5s;
- z-index
- background:  black url("http://static.tumblr.com/c1fc576319bae2b6dc7834cce5f1c5ad/45h2dww/O47n70bl3/tumblr_static_e0blwthhxggkgg8ogcssw4gwk.gif");
- display: inline; (for lists?)
- FLEXBOX:
	Flexbox is a very useful way of laying out a document with CSS. It has the reliability of using tables and the power and ease of generic CSS.
	On some div, you specify
	display: flex;
	By default, each element of that div will now be part of a flex-row. That is, they'll stretch to fit the width of the container, and all be the same width.
	On an element, you can specify, e.g.:
	flex: 1.5;
	To make it stretch bigger than all the others (by a 1.5:1 ratio).
	To make a column of elements, specify on the container (below display: flex;):
	flex-direction: column;
	Flexbox has tons of options and basically allows for a much more versatile version of using tables for layout.
	It even offers vertical centering... Apply the following to an item:
	.item {
		width: 50px;
		height: 50px;
		margin: auto;
	}
	parent {
		display: flex; /* make container a flexbox */
	}
	By specifying margin: auto; on a flexbox item, the margin will stretch as needed to fill the surrounding space, keeping the element itself at 50px-by-50px and centering it vertically and horizontally.
	You can get more detailed info about flexbox at css-tricks: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
- resize: none|both|horizontal|vertical|initial|inherit;
    This lets the user that is using the site have the ability to drag and resize a div
- clip: auto|shape|initial|inherit;
    This lets you decide what parts of an absolutely positioned image are shown if the image is too big for the specifications (essentially, you can crop the image).
- p::selection {
  background: indianred;
  color: white;
	}
	The style within the brackets will be applied when you select the text within that <p> tag.
- COLUMN COUNT is a really cool way to separate text without having to make a table. 
	Several people have taken the .prose and separated it into more than one column. 
	If you want to learn more about  column creating look at this: 
	http://www.w3schools.com/cssref/css3_pr_column-count.asp 
	Note that different web browsers might require a different call!
- Overflow
- some more nice user-uploaded color schemes from adobe colors:
	https://color.adobe.com/explore/most-popular/?time=all
- opacity: controls how transparent something is 
	(1 is fully opaque, 0.1 is 90% transparent and 10% opaque)
- Import modules?
	@import "compass/css3"
	Imports additional modules that you can utilize for different things, such as animations.
- Link Style Order
	Ever wonder why your link styling isn't working? That's because CSS is being dumb and your link styles need to be in a specific order:
		a:link {}
		a:visited {}
		a:hover {} 
		a:active {}
	Why? Remember the "cascade" - basically, they're in the opposite order of specificity (aka a:link applies to all links, a:visited to a few, then a:hover and a:active).
	You can remember it using this simple mnemonic:
	LoVe HAte
	(Of course, if you're a CSS guru you can probably already understand the purpose of this rule and why it doesn't always apply.)
- To account for the background size issue, images' sizes can be adjusted:
	background-repeat: no-repeat;
	This snippet of code keeps your image from being repeated, however there are other values for background-repeat
	List of background-repeat values:
		repeat
		repeat-x
		repeat-y
		no-repeat
		initial      <uses the initial setting, which is repeat>
		inherit       <inherits the setting from parent element>
- You can give forms a "required" or "optional" tag that allows you to alter their appearances,
	similar to how websites give all required forms a red asterisk.
	HTML:
	<input required id="cheese" type="text">
	<input optional id="potato" type="text">
	CSS:
	:required { border:3px solid hotpink; }
	:optional { border:3px solid blue; }
	Now, required text fields have a pink border and optional ones have a blue border.
- transition-timing-function: Make smoother transitions by using different timing functions. First, there are presets for different functions, such as ease-in and ease-out. There's also the cubic-bezier function for custom smoothing. This site can help you figure out parameters for this function. Ex:
	transition-timing-function: cubic-bezier(.5, 0, .5, 1);
	Finally, the steps function will step through the transition with a defined number of steps. Ex:
	transition-timing-function: steps(8, end);
- 